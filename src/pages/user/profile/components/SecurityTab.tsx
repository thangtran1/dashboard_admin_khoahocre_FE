import { useState } from "react";
import { Form, Input, Button, Alert, Card, Progress } from "antd";
import {
  LockOutlined,
  EyeInvisibleOutlined,
  EyeTwoTone,
  SafetyOutlined,
} from "@ant-design/icons";
import { changePassword } from "@/api/services/profileApi";
import { toast } from "sonner";

interface PasswordFormData {
  currentPassword: string;
  newPassword: string;
  confirmPassword: string;
}

export default function SecurityTab() {
  const [passwordForm] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [passwordStrength, setPasswordStrength] = useState(0);

  const calculatePasswordStrength = (password: string) => {
    let strength = 0;
    if (password.length >= 6) strength += 20;
    if (password.length >= 8) strength += 20;
    if (/[a-z]/.test(password)) strength += 20;
    if (/[A-Z]/.test(password)) strength += 20;
    if (/[0-9]/.test(password)) strength += 10;
    if (/[^A-Za-z0-9]/.test(password)) strength += 10;
    return Math.min(strength, 100);
  };

  const getPasswordStrengthColor = (strength: number) => {
    if (strength < 40) return "#ff4d4f";
    if (strength < 70) return "#faad14";
    return "#52c41a";
  };

  const getPasswordStrengthText = (strength: number) => {
    if (strength < 40) return "Y·∫øu";
    if (strength < 70) return "Trung b√¨nh";
    return "M·∫°nh";
  };

  const handlePasswordChange = async (values: PasswordFormData) => {
    try {
      setLoading(true);

      // Show loading toast
      const loadingToast = toast.loading("üîê ƒêang c·∫≠p nh·∫≠t m·∫≠t kh·∫©u...", {
        description: "Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t",
      });

      const passwordData = {
        currentPassword: values.currentPassword,
        newPassword: values.newPassword,
      };

      await changePassword(passwordData);

      // Dismiss loading toast
      toast.dismiss(loadingToast);

      toast.success("üîê ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!", {
        description: "M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
        duration: 3000,
      });

      passwordForm.resetFields();
      setPasswordStrength(0);
    } catch (error: any) {
      toast.error("‚ùå ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i", {
        description: error.message || "Vui l√≤ng ki·ªÉm tra l·∫°i m·∫≠t kh·∫©u hi·ªán t·∫°i",
        duration: 4000,
      });
    } finally {
      setLoading(false);
    }
  };

  const handleNewPasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const password = e.target.value;
    setPasswordStrength(calculatePasswordStrength(password));
  };

  return (
    <div className="max-w-3xl">
      {/* Security Status */}
      <Card className="bg-gradient-to-r from-green-50 to-emerald-50 border-green-200">
        <div className="flex items-center gap-4">
          <div className="p-3 bg-green-100 rounded-full">
            <SafetyOutlined className="text-2xl text-green-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-foreground">
              Tr·∫°ng th√°i b·∫£o m·∫≠t
            </h3>
            <p className="text-muted-foreground">
              T√†i kho·∫£n c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o v·ªá t·ªët
            </p>
            <div className="flex items-center gap-2 mt-2">
              <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                ‚úÖ M·∫≠t kh·∫©u m·∫°nh
              </span>
              <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">
                üîê ƒêƒÉng nh·∫≠p an to√†n
              </span>
            </div>
          </div>
        </div>
      </Card>

      {/* Password Change Form */}
      <Card>
        <div className="mb-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-red-100 rounded-lg">
              <LockOutlined className="text-xl text-red-600" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-foreground">
                ƒê·ªïi m·∫≠t kh·∫©u
              </h3>
              <p className="text-muted-foreground">
                C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n
              </p>
            </div>
          </div>

          <Alert
            message="L·ªùi khuy√™n b·∫£o m·∫≠t"
            description="S·ª≠ d·ª•ng m·∫≠t kh·∫©u c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, bao g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát."
            type="info"
            showIcon
            className="mb-6"
          />
        </div>

        <Form
          form={passwordForm}
          layout="vertical"
          onFinish={handlePasswordChange}
          autoComplete="off"
          className="space-y-4"
        >
          <Form.Item
            name="currentPassword"
            label={
              <span className="text-foreground font-medium">
                <LockOutlined className="mr-2 text-foreground" />
                M·∫≠t kh·∫©u hi·ªán t·∫°i
              </span>
            }
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i!" },
            ]}
          >
            <Input.Password
              size="large"
              placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
              className="rounded-lg"
              iconRender={(visible) =>
                visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />
              }
            />
          </Form.Item>

          <Form.Item
            name="newPassword"
            label={
              <span className="text-foreground font-medium">
                <SafetyOutlined className="mr-2 text-primary" />
                M·∫≠t kh·∫©u m·ªõi
              </span>
            }
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!" },
              { min: 6, message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!" },
            ]}
          >
            <div>
              <Input.Password
                size="large"
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                className="rounded-lg"
                onChange={handleNewPasswordChange}
                iconRender={(visible) =>
                  visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />
                }
              />
              {passwordStrength > 0 && (
                <div className="mt-2">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-sm text-foreground">ƒê·ªô m·∫°nh:</span>
                    <span
                      className="text-sm font-medium"
                      style={{
                        color: getPasswordStrengthColor(passwordStrength),
                      }}
                    >
                      {getPasswordStrengthText(passwordStrength)}
                    </span>
                  </div>
                  <Progress
                    percent={passwordStrength}
                    strokeColor={getPasswordStrengthColor(passwordStrength)}
                    showInfo={false}
                    size="small"
                  />
                </div>
              )}
            </div>
          </Form.Item>

          <Form.Item
            name="confirmPassword"
            label={
              <span className="text-foreground font-medium">
                <LockOutlined className="mr-2 text-primary" />
                X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
              </span>
            }
            dependencies={["newPassword"]}
            rules={[
              { required: true, message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi!" },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue("newPassword") === value) {
                    return Promise.resolve();
                  }
                  return Promise.reject(
                    new Error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                  );
                },
              }),
            ]}
          >
            <Input.Password
              size="large"
              placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
              className="rounded-lg"
              iconRender={(visible) =>
                visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />
              }
            />
          </Form.Item>

          <div className="pt-4">
            <Button
              type="primary"
              htmlType="submit"
              size="large"
              loading={loading}
              className="w-full h-12 rounded-lg bg-gradient-to-r from-primary to-primary border-0 font-medium text-lg shadow-lg hover:from-primary hover:to-primary"
              icon={<LockOutlined />}
            >
              üîê C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
            </Button>
          </div>
        </Form>
      </Card>

      {/* Security Tips */}
      <Card className="bg-gradient-to-r from-yellow-50 to-orange-50 border-yellow-200">
        <h3 className="text-lg font-semibold text-foreground mb-3 flex items-center gap-2">
          üí°M·∫πo b·∫£o m·∫≠t
        </h3>
        <ul className=" flex gap-3 flex-col text-sm text-foreground">
          <li className="flex items-start gap-2">
            <span className="text-foreground ">‚úì</span>
            <span>S·ª≠ d·ª•ng m·∫≠t kh·∫©u duy nh·∫•t cho m·ªói t√†i kho·∫£n</span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-foreground">‚úì</span>
            <span>Thay ƒë·ªïi m·∫≠t kh·∫©u ƒë·ªãnh k·ª≥ (3-6 th√°ng m·ªôt l·∫ßn)</span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-foreground">‚úì</span>
            <span>Kh√¥ng chia s·∫ª m·∫≠t kh·∫©u v·ªõi b·∫•t k·ª≥ ai</span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-foreground">‚úì</span>
            <span>S·ª≠ d·ª•ng tr√¨nh qu·∫£n l√Ω m·∫≠t kh·∫©u ƒë·ªÉ l∆∞u tr·ªØ an to√†n</span>
          </li>
        </ul>
      </Card>
    </div>
  );
}
